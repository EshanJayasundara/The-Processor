$date
	Sun May 21 02:08:13 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$scope module cpu_dut $end
$var wire 1 ! CLK $end
$var wire 32 " INSTRUCTION [31:0] $end
$var wire 32 # PC [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 % mux2 $end
$var wire 1 & mux1 $end
$var wire 8 ' OUT2 [7:0] $end
$var wire 8 ( OUT1 [7:0] $end
$var wire 8 ) OUT [7:0] $end
$var wire 3 * ALUOPOUT [2:0] $end
$var reg 3 + ALUOPIN [2:0] $end
$var reg 8 , IN [7:0] $end
$var reg 8 - IN1 [7:0] $end
$var reg 8 . IN2 [7:0] $end
$var reg 3 / INADDRESS [2:0] $end
$var reg 3 0 OUT1ADDRESS [2:0] $end
$var reg 3 1 OUT2ADDRESS [2:0] $end
$var reg 1 2 WRITE $end
$scope module ALU $end
$var wire 8 3 data1 [7:0] $end
$var wire 8 4 data2 [7:0] $end
$var wire 3 5 operation [2:0] $end
$var wire 8 6 out4 [7:0] $end
$var wire 8 7 out3 [7:0] $end
$var wire 8 8 out2 [7:0] $end
$var wire 8 9 out1 [7:0] $end
$var reg 8 : result [7:0] $end
$scope module add_dut $end
$var wire 8 ; data1 [7:0] $end
$var wire 8 < data2 [7:0] $end
$var reg 8 = out [7:0] $end
$upscope $end
$scope module and_dut $end
$var wire 8 > data1 [7:0] $end
$var wire 8 ? data2 [7:0] $end
$var reg 8 @ out [7:0] $end
$upscope $end
$scope module fwd_dut $end
$var wire 8 A data1 [7:0] $end
$var wire 8 B data2 [7:0] $end
$var reg 8 C out [7:0] $end
$upscope $end
$scope module orr_dut $end
$var wire 8 D data1 [7:0] $end
$var wire 8 E data2 [7:0] $end
$var reg 8 F out [7:0] $end
$upscope $end
$upscope $end
$scope module controler $end
$var wire 32 G instruction [31:0] $end
$var reg 3 H ALUOP [2:0] $end
$var reg 1 & MUX1 $end
$var reg 1 % MUX2 $end
$upscope $end
$scope module registerFile $end
$var wire 1 ! CLK $end
$var wire 8 I IN [7:0] $end
$var wire 3 J INADDRESS [2:0] $end
$var wire 3 K OUT1ADDRESS [2:0] $end
$var wire 3 L OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 2 WRITE $end
$var reg 8 M OUT1 [7:0] $end
$var reg 8 N OUT2 [7:0] $end
$var reg 64 O registerfile [63:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
12
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
x%
1$
b0 #
bx "
0!
$end
#4
b0 O
b1000 P
1!
#5
0$
#8
0!
#12
1!
#13
b0 +
b0 5
b1011 .
b1011 4
b1011 <
b1011 ?
b1011 B
b1011 E
0%
1&
b0 *
b0 H
b11 1
b11 L
b0 0
b0 K
b0 /
b0 J
b1011 "
b1011 G
#14
b1011 ,
b1011 I
b1011 )
b1011 :
bx1x11 6
bx1x11 F
b0x0xx 7
b0x0xx @
b1011 9
b1011 C
#16
0!
#20
b1011 -
b1011 3
b1011 ;
b1011 >
b1011 A
b1011 D
b0 '
b0 N
b1011 (
b1011 M
b101100000000000000000000000000000000000000000000000000000000 O
1!
#21
b11 .
b11 4
b11 <
b11 ?
b11 B
b11 E
b1 /
b1 J
b1011 7
b1011 @
b1011 6
b1011 F
b10000000000000011 "
b10000000000000011 G
#22
b11 ,
b11 I
b11 )
b11 :
b11 7
b11 @
b11 9
b11 C
b1110 8
b1110 =
#24
0!
#28
b101100000011000000000000000000000000000000000000000000000000 O
1!
#29
b1110 ,
b1110 I
b1110 )
b1110 :
b1 +
b1 5
1%
0&
b100 *
b100 H
b0 .
b0 4
b0 <
b0 ?
b0 B
b0 E
b1 1
b1 L
b10 /
b10 J
b10000000000000100000000000000001 "
b10000000000000100000000000000001 G
#30
b0 7
b0 @
b0 9
b0 C
#31
b1011 ,
b1011 I
b1011 )
b1011 :
b1011 8
b1011 =
#32
0!
#36
b11111101 .
b11111101 4
b11111101 <
b11111101 ?
b11111101 B
b11111101 E
b11 '
b11 N
b101100000011000010110000000000000000000000000000000000000000 O
1!
#37
0%
b1 *
b1 H
b11 .
b11 4
b11 <
b11 ?
b11 B
b11 E
b11 /
b11 J
b11111111 6
b11111111 F
b1001 7
b1001 @
b11111101 9
b11111101 C
b100000000000110000000000000001 "
b100000000000110000000000000001 G
#38
b1110 ,
b1110 I
b1110 )
b1110 :
b11 7
b11 @
b1011 6
b1011 F
b11 9
b11 C
b1110 8
b1110 =
#40
0!
#44
b101100000011000010110000111000000000000000000000000000000000 O
1!
#45
b11 ,
b11 I
b11 )
b11 :
b10 +
b10 5
b10 *
b10 H
b100 /
b100 J
b1000000000001000000000000000001 "
b1000000000001000000000000000001 G
#48
0!
#52
b101100000011000010110000111000000011000000000000000000000000 O
1!
#53
b1011 ,
b1011 I
b1011 )
b1011 :
b11 +
b11 5
b11 *
b11 H
b101 /
b101 J
b1100000000001010000000000000001 "
b1100000000001010000000000000001 G
#56
0!
#60
b101100000011000010110000111000000011000010110000000000000000 O
1!
#61
b11 ,
b11 I
b11 )
b11 :
b0 +
b0 5
b0 *
b0 H
b110 /
b110 J
b10100000000001100000000000000001 "
b10100000000001100000000000000001 G
#64
0!
#68
b101100000011000010110000111000000011000010110000001100000000 O
1!
#72
0!
#76
1!
#80
0!
#81
